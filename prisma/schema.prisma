// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String?
    phone         String?
    image         String?
    role          String?
    gender        String?
    dob           DateTime?
    emailVerified Boolean
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    organizationId String?
    organization   Organization? @relation(fields: [organizationId], references: [id])

    departmentId String?
    department   Department? @relation(fields: [departmentId], references: [id])

    classId String?
    class   Class?  @relation("ClassStudents", fields: [classId], references: [id])

    teachingSubjects Subject[] @relation("TeacherSubjects")

    classTeacherOf Class[] @relation("ClassTeacher")

    crOf Class[] @relation("CR")

    timetable Timetable[]

    assignments Assignment[] @relation("TeacherAssignments")

    submissions Submission[]

    studyMaterials StudyMaterial[]

    doubts Doubt[]

    doubtMessages DoubtMessage[]

    sessions Session[]
    accounts Account[]

    @@map("user")
}

model Organization {
    id        String   @id @default(cuid())
    name      String
    email     String
    phone     String?
    address   String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    users       User[]
    departments Department[]
    magicLinks  MagicLink[]

    @@map("organization")
}

model Department {
    id             String       @id @default(cuid())
    name           String
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id])

    magicLink MagicLink[]

    teachers  User[]
    classes   Class[]
    semesters Semester[]

    @@map("department")
}

model MagicLink {
    id String @id @default(cuid())

    token String @unique

    role           String
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id])

    departmentId String?
    department   Department? @relation(fields: [departmentId], references: [id])

    expiresAt DateTime
    createdAt DateTime @default(now())

    @@map("magic_link")
}

model Session {
    id        String   @id @default(cuid())
    expiresAt DateTime
    token     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    ipAddress String?
    userAgent String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([token])
    @@map("session")
}

model Account {
    id                    String    @id @default(cuid())
    accountId             String
    providerId            String
    userId                String
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime  @default(now())
    updatedAt             DateTime  @updatedAt

    @@map("account")
}

model Class {
    id      String @id @default(cuid())
    name    String
    year    Int
    section String

    departmentId String
    department   Department @relation(fields: [departmentId], references: [id])

    semesterId String
    semester   Semester @relation(fields: [semesterId], references: [id])

    students User[]    @relation("ClassStudents")
    subjects Subject[]

    classTeacherId String?
    classTeacher   User?   @relation("ClassTeacher", fields: [classTeacherId], references: [id])

    crId String?
    cr   User?   @relation("CR", fields: [crId], references: [id])

    Timetable Timetable[]

    @@map("class")
}

model Semester {
    id   String @id @default(cuid())
    name String
    year Int

    departmentId String
    department   Department @relation(fields: [departmentId], references: [id])

    subjects Subject[]
    classes  Class[]

    @@map("semester")
}

model Subject {
    id         String   @id @default(cuid())
    name       String
    type       String
    semesterId String
    semester   Semester @relation(fields: [semesterId], references: [id])

    classes Class[]
    doubts  Doubt[]

    teachers    User[]          @relation("TeacherSubjects")
    chapters    Chapter[]
    materials   StudyMaterial[]
    assignments Assignment[]    @relation("SubjectAssignments")
    Timetables  Timetable[]

    @@map("subject")
}

model Chapter {
    id        String  @id @default(cuid())
    title     String
    subjectId String
    subject   Subject @relation(fields: [subjectId], references: [id])
    topics    Topic[]

    @@map("chapter")
}

model Topic {
    id        String          @id @default(cuid())
    title     String
    status    String
    chapterId String
    chapter   Chapter         @relation(fields: [chapterId], references: [id])
    doubts    Doubt[]
    materials StudyMaterial[]

    @@map("topic")
}

model Timetable {
    id        String   @id @default(cuid())
    classId   String
    class     Class    @relation(fields: [classId], references: [id])
    subjectId String
    subject   Subject  @relation(fields: [subjectId], references: [id])
    teacherId String
    teacher   User     @relation(fields: [teacherId], references: [id])
    dayOfWeek Int
    startTime DateTime
    endTime   DateTime

    @@map("timetable")
}

model Assignment {
    id          String       @id @default(cuid())
    title       String
    dueDate     DateTime
    subjectId   String
    subject     Subject      @relation("SubjectAssignments", fields: [subjectId], references: [id])
    teacherId   String
    teacher     User         @relation("TeacherAssignments", fields: [teacherId], references: [id])
    files       File[]       @relation("AssignmentFiles")
    submissions Submission[]

    @@map("assignment")
}

model Submission {
    id           String     @id @default(cuid())
    assignmentId String
    assignment   Assignment @relation(fields: [assignmentId], references: [id])
    studentId    String
    student      User       @relation(fields: [studentId], references: [id])
    files        File[]     @relation("SubmissionFiles")
    submittedAt  DateTime

    @@map("submission")
}

model StudyMaterial {
    id           String   @id @default(cuid())
    title        String
    type         String
    subjectId    String?
    subject      Subject? @relation(fields: [subjectId], references: [id])
    topicId      String?
    topic        Topic?   @relation(fields: [topicId], references: [id])
    uploadedById String
    uploadedBy   User     @relation(fields: [uploadedById], references: [id])
    files        File[]   @relation("StudyMaterialsFiles")

    @@map("study_material")
}

model Doubt {
    id        String  @id @default(cuid())
    question  String
    studentId String
    student   User    @relation(fields: [studentId], references: [id])
    topicId   String?
    topic     Topic?  @relation(fields: [topicId], references: [id])

    subjectId String?
    subject   Subject? @relation(fields: [subjectId], references: [id])

    message DoubtMessage[]

    @@map("doubt")
}

model DoubtMessage {
    id        String   @id @default(cuid())
    doubtId   String
    doubt     Doubt    @relation(fields: [doubtId], references: [id])
    senderId  String
    sender    User     @relation(fields: [senderId], references: [id])
    content   String
    createdAt DateTime @default(now())
    files     File[]   @relation("DoubtMessageFiles")

    @@map("doubt_message")
}

model File {
    id        String   @id @default(cuid())
    url       String
    type      String?
    createdAt DateTime @default(now())

    studyMaterials  StudyMaterial[] @relation("StudyMaterialsFiles")
    submissions     Submission[]    @relation("SubmissionFiles")
    doubtMessages   DoubtMessage[]  @relation("DoubtMessageFiles")
    assignmentFiles Assignment[]    @relation("AssignmentFiles")

    @@map("file")
}
